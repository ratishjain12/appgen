name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install -e .
          pip install pytest pytest-cov pytest-mock black isort flake8 mypy bandit

      - name: Run linting
        run: |
          black --check --diff .
          isort --check-only --diff .
          flake8 .

      - name: Run type checking
        run: |
          mypy appgen/ config.py generator/ --ignore-missing-imports

      - name: Run security checks
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run tests
        run: |
          pytest tests/ --cov=appgen --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [nextjs, reactjs, express, flask, django, svelte]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install AppGen
        run: |
          pip install -e .

      - name: Test ${{ matrix.framework }} project generation
        run: |
          appgen create --framework ${{ matrix.framework }} --dir test-${{ matrix.framework }}
          ls -la test-${{ matrix.framework }}
          rm -rf test-${{ matrix.framework }}

  express-db-test:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [mongodb, postgresql, supabase, serverless]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install AppGen
        run: |
          pip install -e .

      - name: Test Express with ${{ matrix.database }}
        run: |
          appgen create --framework express --db ${{ matrix.database }} --dir test-express-${{ matrix.database }}
          ls -la test-express-${{ matrix.database }}
          rm -rf test-express-${{ matrix.database }}
